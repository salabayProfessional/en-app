import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import { render } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import renderer from 'react-test-renderer';
import { LockIcon } from '../../icons/generated/LockIcon';
import { ThemeProvider } from '../../theme';
import { classicTheme, defaultTheme } from '../../themes';
import Button from '../src/Button';
import IconButton from '../src/IconButton';
describe.each([['default', defaultTheme], ['classic', classicTheme]])('<Button /> % %s', function (_, theme) {
  it('snapshots with the rendered output', function () {
    var component = /*#__PURE__*/React.createElement(ThemeProvider, {
      value: theme
    }, /*#__PURE__*/React.createElement(Button, null));
    var tree = renderer.create(component).toJSON();
    expect(tree).toMatchSnapshot();
  });
});

function makeButtonFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/React.createElement(Button, _extends({
    "data-testid": "button"
  }, props), "Test");
}

makeButtonFixture.displayName = "makeButtonFixture";

function makeIconButtonFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/React.createElement(IconButton, _extends({
    "data-testid": "button"
  }, props));
}

makeIconButtonFixture.displayName = "makeIconButtonFixture";
describe('Button', function () {
  it('renders children without crashing', function () {
    expect(function () {
      return render(makeButtonFixture());
    }).not.toThrow();
  });
  it('accepts an `onClick` handler that gets called upon clicking', function () {
    var onClick = jest.fn();

    var _render = render(makeButtonFixture({
      onClick: onClick
    })),
        getByTestId = _render.getByTestId;

    var container = getByTestId('button');
    userEvent.click(container);
    expect(onClick).toHaveBeenCalledTimes(1);
  });
  it('has a `disabled` prop that disables the button', function () {
    var onClick = jest.fn();

    var _render2 = render(makeButtonFixture({
      onClick: onClick,
      disabled: true
    })),
        getByTestId = _render2.getByTestId;

    var container = getByTestId('button');
    expect(function () {
      return userEvent.click(container);
    }).toThrowError();
    expect(onClick).toHaveBeenCalledTimes(0);
  });
  it('has a `isLoading` prop that renders a spinner and disables the button', function () {
    var onClick = jest.fn();

    var _render3 = render(makeButtonFixture({
      onClick: onClick,
      isLoading: true
    })),
        getByTestId = _render3.getByTestId;

    var container = getByTestId('button');
    expect(function () {
      return userEvent.click(container);
    }).toThrowError();
    expect(container.querySelector('svg')).toBeVisible();
    expect(onClick).toHaveBeenCalledTimes(0);
  });
  it('renders an icon in either the `iconBefore` props', function () {
    var _render4 = render(makeButtonFixture({
      iconBefore: LockIcon
    })),
        getByTestId = _render4.getByTestId;

    var container = getByTestId('button');
    expect(container.querySelector('svg')).toHaveAttribute('data-icon', 'lock');
  });
  it('renders an icon in either the `iconAfter` props', function () {
    var _render5 = render(makeButtonFixture({
      iconAfter: LockIcon
    })),
        getByTestId = _render5.getByTestId;

    var container = getByTestId('button');
    expect(container.querySelector('svg')).toHaveAttribute('data-icon', 'lock');
  });
  it('properly handles keyboard events to simulate clicks', function () {
    var onClick = jest.fn();

    var _render6 = render(makeButtonFixture({
      onClick: onClick,
      iconAfter: LockIcon
    })),
        getByTestId = _render6.getByTestId;

    var container = getByTestId('button');
    container.focus();
    expect(document.activeElement).toEqual(container);
    userEvent.keyboard('{enter}');
    expect(onClick).toHaveBeenCalledTimes(1);
    userEvent.keyboard('{space}');
    expect(onClick).toHaveBeenCalledTimes(2);
  });
});
describe('IconButton', function () {
  it('Passes through an icon when passes as a component reference', function () {
    var _render7 = render(makeIconButtonFixture({
      icon: LockIcon
    })),
        getByTestId = _render7.getByTestId;

    var container = getByTestId('button');
    expect(container.querySelector('svg')).toHaveAttribute('data-icon', 'lock');
  });
  it('Passes through an instantiated component as `icon`', function () {
    var _render8 = render(makeIconButtonFixture({
      icon: /*#__PURE__*/React.createElement(LockIcon, {
        size: 24
      })
    })),
        getByTestId = _render8.getByTestId;

    var container = getByTestId('button');
    var svg = container.querySelector('svg');
    expect(window.getComputedStyle(svg).width).toEqual('24px');
    expect(window.getComputedStyle(svg).height).toEqual('24px');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,