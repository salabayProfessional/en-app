import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useState } from 'react';
import { render } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { TextInput, TextInputField } from '../';

function makeTextInputFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/React.createElement(TextInput, _extends({
    "data-testid": "input"
  }, props));
}

makeTextInputFixture.displayName = "makeTextInputFixture";

function makeTextInputFieldFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/React.createElement(TextInputField, _extends({
    "data-testid": "input",
    label: "Name"
  }, props));
}

makeTextInputFieldFixture.displayName = "makeTextInputFieldFixture";
describe('TextInput', function () {
  it('Should render without crashing', function () {
    expect(function () {
      return render(makeTextInputFixture());
    }).not.toThrow();
  });
  it('Should accept placeholder text', function () {
    var _render = render(makeTextInputFixture({
      placeholder: 'Enter text here'
    })),
        getByPlaceholderText = _render.getByPlaceholderText;

    expect(getByPlaceholderText('Enter text here')).toBeInTheDocument();
  });
  it('Should set an invalid state if `isInvalid` is `true`', function () {
    var _render2 = render(makeTextInputFixture({
      isInvalid: true
    })),
        getByTestId = _render2.getByTestId;

    var input = getByTestId('input');
    expect(input).toHaveAttribute('aria-invalid', 'true');
  });
  it('Should accept an `onChange` handler to be a controlled component', function () {
    function ControlledTextInput() {
      var _useState = useState(''),
          _useState2 = _slicedToArray(_useState, 2),
          value = _useState2[0],
          setValue = _useState2[1];

      return /*#__PURE__*/React.createElement(TextInput, {
        "data-testid": "input",
        placeholder: "Enter text here",
        value: value,
        onChange: function onChange(e) {
          return setValue(e.target.value);
        }
      });
    }

    var _render3 = render( /*#__PURE__*/React.createElement(ControlledTextInput, null)),
        getByDisplayValue = _render3.getByDisplayValue,
        getByTestId = _render3.getByTestId;

    var input = getByTestId('input');
    userEvent.click(input);
    expect(document.activeElement).toEqual(input);
    userEvent.type(input, 'Testing');
    expect(getByDisplayValue('Testing')).toEqual(input);
  });
  it('Should not be interactive if `disabled` is passed in', function () {
    var _render4 = render(makeTextInputFixture({
      disabled: true
    })),
        getByDisplayValue = _render4.getByDisplayValue,
        getByTestId = _render4.getByTestId;

    var input = getByTestId('input');
    userEvent.type(input, 'Testing');
    expect(function () {
      return getByDisplayValue('Testing');
    }).toThrowError();
    expect(getByDisplayValue('')).toEqual(input);
  });
});
describe('TextInputField', function () {
  it('Should render without crashing', function () {
    expect(function () {
      return render(makeTextInputFieldFixture());
    }).not.toThrow();
  });
  it('Should render a required `label` when passed in', function () {
    var _render5 = render(makeTextInputFieldFixture()),
        getByLabelText = _render5.getByLabelText;

    expect(getByLabelText('Name')).toBeInTheDocument();
  });
  it('Should render a `hint` underneath the input', function () {
    var _render6 = render(makeTextInputFieldFixture({
      hint: 'Enter a value in the input'
    })),
        getByText = _render6.getByText;

    expect(getByText('Enter a value in the input')).toBeInTheDocument();
  });
  it('Should render an astrix when `required` is passed in', function () {
    var _render7 = render(makeTextInputFieldFixture({
      required: true
    })),
        getByTitle = _render7.getByTitle;

    expect(getByTitle('This field is required.')).toBeInTheDocument();
  });
  it('Should not render a `validationMessage` when passed in', function () {
    var _render8 = render(makeTextInputFieldFixture({
      validationMessage: 'Please enter a value'
    })),
        getByText = _render8.getByText;

    expect(getByText('Please enter a value')).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,