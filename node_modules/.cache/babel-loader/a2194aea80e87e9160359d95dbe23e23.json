{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"addOnBlur\", \"disabled\", \"height\", \"separator\", \"values\", \"tagSubmitKey\", \"tagProps\", \"onAdd\", \"onChange\", \"onRemove\", \"onBlur\", \"onFocus\", \"onInputChange\", \"className\", \"inputProps\", \"inputRef\"],\n    _excluded2 = [\"className\"];\n/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React, { memo, forwardRef, useState } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useId, useStyleConfig } from '../../hooks';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { majorScale } from '../../scales';\nimport { TextInput } from '../../text-input';\nimport Tag from './Tag';\nvar GET_KEY_FOR_TAG_DELIMITER = {\n  enter: 'Enter',\n  space: ' '\n};\nvar emptyProps = {};\nvar emptyArray = [];\nvar internalStyles = {\n  alignItems: 'center',\n  display: 'inline-flex',\n  flexWrap: 'wrap'\n};\nvar pseudoSelectors = {\n  _focused: '&[aria-activedescendant]',\n  _disabled: '&[aria-disabled=\"true\"]'\n};\nvar TagInput = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TagInput(props, ref) {\n  var _props$addOnBlur = props.addOnBlur,\n      addOnBlur = _props$addOnBlur === void 0 ? false : _props$addOnBlur,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$height = props.height,\n      height = _props$height === void 0 ? 32 : _props$height,\n      _props$separator = props.separator,\n      separator = _props$separator === void 0 ? /[,\\n\\r]/ : _props$separator,\n      _props$values = props.values,\n      values = _props$values === void 0 ? emptyArray : _props$values,\n      _props$tagSubmitKey = props.tagSubmitKey,\n      tagSubmitKey = _props$tagSubmitKey === void 0 ? 'enter' : _props$tagSubmitKey,\n      _props$tagProps = props.tagProps,\n      tagProps = _props$tagProps === void 0 ? emptyProps : _props$tagProps,\n      onAdd = props.onAdd,\n      onChange = props.onChange,\n      onRemove = props.onRemove,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      onInputChange = props.onInputChange,\n      className = props.className,\n      _props$inputProps = props.inputProps,\n      inputProps = _props$inputProps === void 0 ? emptyProps : _props$inputProps,\n      inputRef = props.inputRef,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFocused = _useState4[0],\n      setIsFocused = _useState4[1];\n\n  var id = useId('TagInput');\n\n  var getValues = function getValues() {\n    var inputValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return separator ? inputValue.split(separator).map(function (v) {\n      return v.trim();\n    }).filter(function (v) {\n      return v.length > 0;\n    }) : [inputValue];\n  };\n\n  var addTags = function addTags() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var newValues = getValues(value);\n    var shouldClearInput = safeInvoke(onAdd, newValues);\n\n    if (typeof onChange === 'function') {\n      shouldClearInput = shouldClearInput || onChange(values.concat(newValues));\n    }\n\n    if (shouldClearInput !== false) {\n      setInputValue('');\n    }\n  };\n\n  var removeTagAtIndex = function removeTagAtIndex(index) {\n    safeInvoke(onRemove, values[index], index); // Remove item at index as a new array\n\n    var newValues = values.filter(function (_, i) {\n      return i !== index;\n    });\n    safeInvoke(onChange, newValues);\n  };\n\n  var handleBackspaceToRemove = function handleBackspaceToRemove() {\n    removeTagAtIndex(values.length - 1);\n  };\n\n  var handleBlur = function handleBlur(event) {\n    var container = event.target;\n    requestAnimationFrame(function () {\n      if (!container.contains(document.activeElement)) {\n        if (addOnBlur && inputValue) {\n          addTags(inputValue);\n        }\n\n        setIsFocused(false);\n      }\n    });\n    safeInvoke(onBlur, event);\n  };\n\n  var handleInputChange = function handleInputChange(event) {\n    setInputValue(event.target.value);\n    safeInvoke(onInputChange, event);\n  };\n\n  var handleInputFocus = function handleInputFocus(event) {\n    setIsFocused(true);\n    safeInvoke(onFocus, event);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var _event$target = event.target,\n        selectionEnd = _event$target.selectionEnd,\n        value = _event$target.value;\n    var key = GET_KEY_FOR_TAG_DELIMITER[tagSubmitKey];\n\n    if (event.key === key) {\n      event.preventDefault();\n      addTags(value);\n    } else if (event.key === 'Backspace' && selectionEnd === 0) {\n      handleBackspaceToRemove(event);\n    }\n  };\n\n  var handleRemoveTag = function handleRemoveTag(event) {\n    // Using data attribute to simplify callback logic -- one handler for all children\n    var index = Number(event.currentTarget.parentElement.getAttribute('data-tag-index'));\n    removeTagAtIndex(index);\n  };\n\n  var maybeRenderTag = function maybeRenderTag(tag, index) {\n    if (!tag) {\n      return null;\n    }\n\n    var propsForElement = safeInvoke(tagProps, tag, index) || tagProps;\n    return /*#__PURE__*/React.createElement(Tag, _extends({\n      key: \"\".concat(tag, \":\").concat(index),\n      \"data-tag-index\": index,\n      marginX: majorScale(1),\n      onRemove: disabled ? null : handleRemoveTag,\n      isRemovable: !disabled\n    }, propsForElement), tag);\n  };\n\n  var _useStyleConfig = useStyleConfig('TagInput', {\n    appearance: 'default',\n    height: height\n  }, pseudoSelectors, internalStyles),\n      themedContainerClassName = _useStyleConfig.className,\n      boxProps = _objectWithoutProperties(_useStyleConfig, _excluded2);\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    \"aria-disabled\": disabled || undefined,\n    \"aria-activedescendant\": isFocused ? id : undefined,\n    className: cx(themedContainerClassName, className),\n    ref: ref,\n    onBlur: handleBlur\n  }, boxProps, rest), values.map(maybeRenderTag), /*#__PURE__*/React.createElement(TextInput, _extends({\n    appearance: \"none\",\n    id: id,\n    disabled: disabled,\n    flexGrow: \"1\",\n    height: height - 4,\n    width: \"auto\",\n    type: \"text\",\n    value: inputValue\n  }, inputProps, {\n    ref: inputRef,\n    onChange: handleInputChange,\n    onFocus: handleInputFocus,\n    onKeyDown: handleKeyDown\n  })));\n}));\nTagInput.propTypes = {\n  /** Whether or not the inputValue should be added to the tags when the input blurs. */\n  addOnBlur: PropTypes.bool,\n\n  /** The class name to apply to the container component. */\n  className: PropTypes.string,\n\n  /** Whether or not the input should be disabled. */\n  disabled: PropTypes.bool,\n\n  /** The vertical size of the input */\n  height: PropTypes.number,\n\n  /** Props to pass to the input component. Note that `ref` and `key` are not supported. See `inputRef`. */\n  inputProps: PropTypes.object,\n\n  /**\n   * Ref handler for the input element.\n   * (input: HTMLInputElement | null) => void\n   */\n  inputRef: PropTypes.func,\n\n  /**\n   * Callback invoked when new tags are added.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onAdd: PropTypes.func,\n\n  /**\n   * Callback invoked when focus on the input blurs.\n   * (event) => void\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback invoked when the tag values change.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback invoked when the input receives focus.\n   * (event) => void\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback invoked when the value of the input is changed. Shorthand for `inputProps={{ onChange }}`.\n   * (event) => void\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback invoked when a tag is removed.\n   * Receives value and index of removed tag.\n   * (value: string | node, index: number) => void\n   */\n  onRemove: PropTypes.func,\n\n  /** Value or RegExp to split on pasted text or on enter keypress */\n  separator: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp), PropTypes.oneOf([false])]),\n\n  /** Provide props to tag component (actually `Badge`, for now). */\n  tagProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /** Key to press in order to submit a new tag while typing.  */\n  tagSubmitKey: PropTypes.oneOf(['enter', 'space']),\n\n  /** Controlled tag values. Each value is rendered inside a tag. */\n  values: PropTypes.arrayOf(PropTypes.node)\n};\nexport default TagInput;","map":{"version":3,"sources":["../../../src/tag-input/src/TagInput.js"],"names":["GET_KEY_FOR_TAG_DELIMITER","enter","space","emptyProps","emptyArray","internalStyles","alignItems","display","flexWrap","pseudoSelectors","_focused","_disabled","TagInput","memo","forwardRef","addOnBlur","disabled","height","separator","values","tagSubmitKey","tagProps","onAdd","onChange","onRemove","onBlur","onFocus","onInputChange","className","inputProps","inputRef","rest","props","inputValue","setInputValue","useState","isFocused","setIsFocused","id","useId","getValues","v","addTags","value","newValues","shouldClearInput","safeInvoke","removeTagAtIndex","i","handleBackspaceToRemove","handleBlur","container","event","requestAnimationFrame","document","handleInputChange","handleInputFocus","handleKeyDown","selectionEnd","key","handleRemoveTag","index","Number","maybeRenderTag","propsForElement","majorScale","themedContainerClassName","boxProps","useStyleConfig","appearance","cx","PropTypes"],"mappings":"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","sourcesContent":["/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React, { memo, forwardRef, useState } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { useId, useStyleConfig } from '../../hooks'\nimport safeInvoke from '../../lib/safe-invoke'\nimport { majorScale } from '../../scales'\nimport { TextInput } from '../../text-input'\nimport Tag from './Tag'\n\nconst GET_KEY_FOR_TAG_DELIMITER = {\n  enter: 'Enter',\n  space: ' '\n}\n\nconst emptyProps = {}\nconst emptyArray = []\n\nconst internalStyles = {\n  alignItems: 'center',\n  display: 'inline-flex',\n  flexWrap: 'wrap'\n}\n\nconst pseudoSelectors = {\n  _focused: '&[aria-activedescendant]',\n  _disabled: '&[aria-disabled=\"true\"]'\n}\n\nconst TagInput = memo(\n  forwardRef(function TagInput(props, ref) {\n    const {\n      addOnBlur = false,\n      disabled = false,\n      height = 32,\n      separator = /[,\\n\\r]/,\n      values = emptyArray,\n      tagSubmitKey = 'enter',\n      tagProps = emptyProps,\n      onAdd,\n      onChange,\n      onRemove,\n      onBlur,\n      onFocus,\n      onInputChange,\n      className,\n      inputProps = emptyProps,\n      inputRef,\n      ...rest\n    } = props\n    const [inputValue, setInputValue] = useState('')\n    const [isFocused, setIsFocused] = useState(false)\n    const id = useId('TagInput')\n\n    const getValues = (inputValue = '') =>\n      separator\n        ? inputValue\n            .split(separator)\n            .map(v => v.trim())\n            .filter(v => v.length > 0)\n        : [inputValue]\n\n    const addTags = (value = '') => {\n      const newValues = getValues(value)\n      let shouldClearInput = safeInvoke(onAdd, newValues)\n\n      if (typeof onChange === 'function') {\n        shouldClearInput = shouldClearInput || onChange(values.concat(newValues))\n      }\n\n      if (shouldClearInput !== false) {\n        setInputValue('')\n      }\n    }\n\n    const removeTagAtIndex = index => {\n      safeInvoke(onRemove, values[index], index)\n\n      // Remove item at index as a new array\n      const newValues = values.filter((_, i) => i !== index)\n      safeInvoke(onChange, newValues)\n    }\n\n    const handleBackspaceToRemove = () => {\n      removeTagAtIndex(values.length - 1)\n    }\n\n    const handleBlur = event => {\n      const container = event.target\n\n      requestAnimationFrame(() => {\n        if (!container.contains(document.activeElement)) {\n          if (addOnBlur && inputValue) {\n            addTags(inputValue)\n          }\n\n          setIsFocused(false)\n        }\n      })\n\n      safeInvoke(onBlur, event)\n    }\n\n    const handleInputChange = event => {\n      setInputValue(event.target.value)\n      safeInvoke(onInputChange, event)\n    }\n\n    const handleInputFocus = event => {\n      setIsFocused(true)\n      safeInvoke(onFocus, event)\n    }\n\n    const handleKeyDown = event => {\n      const { selectionEnd, value } = event.target\n      const key = GET_KEY_FOR_TAG_DELIMITER[tagSubmitKey]\n\n      if (event.key === key) {\n        event.preventDefault()\n        addTags(value)\n      } else if (event.key === 'Backspace' && selectionEnd === 0) {\n        handleBackspaceToRemove(event)\n      }\n    }\n\n    const handleRemoveTag = event => {\n      // Using data attribute to simplify callback logic -- one handler for all children\n      const index = Number(event.currentTarget.parentElement.getAttribute('data-tag-index'))\n      removeTagAtIndex(index)\n    }\n\n    const maybeRenderTag = (tag, index) => {\n      if (!tag) {\n        return null\n      }\n\n      const propsForElement = safeInvoke(tagProps, tag, index) || tagProps\n\n      return (\n        <Tag\n          key={`${tag}:${index}`}\n          data-tag-index={index}\n          marginX={majorScale(1)}\n          onRemove={disabled ? null : handleRemoveTag}\n          isRemovable={!disabled}\n          {...propsForElement}\n        >\n          {tag}\n        </Tag>\n      )\n    }\n\n    const { className: themedContainerClassName, ...boxProps } = useStyleConfig(\n      'TagInput',\n      { appearance: 'default', height },\n      pseudoSelectors,\n      internalStyles\n    )\n\n    return (\n      <Box\n        aria-disabled={disabled || undefined}\n        aria-activedescendant={isFocused ? id : undefined}\n        className={cx(themedContainerClassName, className)}\n        ref={ref}\n        onBlur={handleBlur}\n        {...boxProps}\n        {...rest}\n      >\n        {values.map(maybeRenderTag)}\n        <TextInput\n          appearance=\"none\"\n          id={id}\n          disabled={disabled}\n          flexGrow=\"1\"\n          height={height - 4}\n          width=\"auto\"\n          type=\"text\"\n          value={inputValue}\n          {...inputProps}\n          ref={inputRef}\n          onChange={handleInputChange}\n          onFocus={handleInputFocus}\n          onKeyDown={handleKeyDown}\n        />\n      </Box>\n    )\n  })\n)\n\nTagInput.propTypes = {\n  /** Whether or not the inputValue should be added to the tags when the input blurs. */\n  addOnBlur: PropTypes.bool,\n  /** The class name to apply to the container component. */\n  className: PropTypes.string,\n  /** Whether or not the input should be disabled. */\n  disabled: PropTypes.bool,\n  /** The vertical size of the input */\n  height: PropTypes.number,\n  /** Props to pass to the input component. Note that `ref` and `key` are not supported. See `inputRef`. */\n  inputProps: PropTypes.object,\n  /**\n   * Ref handler for the input element.\n   * (input: HTMLInputElement | null) => void\n   */\n  inputRef: PropTypes.func,\n  /**\n   * Callback invoked when new tags are added.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onAdd: PropTypes.func,\n  /**\n   * Callback invoked when focus on the input blurs.\n   * (event) => void\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback invoked when the tag values change.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback invoked when the input receives focus.\n   * (event) => void\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Callback invoked when the value of the input is changed. Shorthand for `inputProps={{ onChange }}`.\n   * (event) => void\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Callback invoked when a tag is removed.\n   * Receives value and index of removed tag.\n   * (value: string | node, index: number) => void\n   */\n  onRemove: PropTypes.func,\n  /** Value or RegExp to split on pasted text or on enter keypress */\n  separator: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp), PropTypes.oneOf([false])]),\n  /** Provide props to tag component (actually `Badge`, for now). */\n  tagProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /** Key to press in order to submit a new tag while typing.  */\n  tagSubmitKey: PropTypes.oneOf(['enter', 'space']),\n  /** Controlled tag values. Each value is rendered inside a tag. */\n  values: PropTypes.arrayOf(PropTypes.node)\n}\n\nexport default TagInput\n"]},"metadata":{},"sourceType":"module"}