{"ast":null,"code":"import _slicedToArray from\"/Users/macbookpro/Documents/GitHub/en-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Button}from\"evergreen-ui\";import React,{useState}from\"react\";import{Table}from\"reactstrap\";import Row from\"../../../../component/Row/Row\";import SearchWord from\"../../../../component/SearchWord/SearchWord\";import{useOwnDictionary}from\"../../../../hooks/useOwnDictionary\";import{generateString}from\"../../../../specialFunction/specialFunction\";import DataWords from\"./DataWords\";import\"./OwnDictionary.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var OwnDictionary=function OwnDictionary(){var ownDictionary=useOwnDictionary();var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),activeWord=_useState2[0],setActiveWord=_useState2[1];var _useState3=useState(\"1 part\"),_useState4=_slicedToArray(_useState3,2),activePart=_useState4[0],setActivePart=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),activePartOptions=_useState6[0],setActivePartOptions=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isModal=_useState8[0],setIsModal=_useState8[1];var toggleModal=function toggleModal(){return setIsModal(!isModal);};var newActive=function newActive(word){return activeWord===word?setActiveWord(\"\"):setActiveWord(word);};var newActivePartOptions=function newActivePartOptions(part){return activePartOptions===part?setActivePartOptions(\"\"):setActivePartOptions(part);};var listWords=function listWords(){var _ownDictionary$idx,_ownDictionary$idx$wo;var idx=ownDictionary.findIndex(function(item){return item.part===activePart;});return(_ownDictionary$idx=ownDictionary[idx])===null||_ownDictionary$idx===void 0?void 0:(_ownDictionary$idx$wo=_ownDictionary$idx.words)===null||_ownDictionary$idx$wo===void 0?void 0:_ownDictionary$idx$wo.map(function(word){return/*#__PURE__*/_jsx(DataWords,{data:word,active:activeWord,newActive:newActive,activePart:activePart},generateString());});};if(isModal){prompt();};var dictionaryTabs=ownDictionary.map(function(part){return/*#__PURE__*/_jsxs(\"div\",{className:\"own-tabs\",children:[/*#__PURE__*/_jsx(Button,{marginY:8,marginRight:12,onClick:function onClick(){return setActivePart(part.part);},onDoubleClick:function onDoubleClick(){return newActivePartOptions(part.part);},children:part.part},generateString()),/*#__PURE__*/_jsxs(\"div\",{className:\"\".concat(activePartOptions===part.part?\"show\":\"hide\",\" part-option\"),children:[/*#__PURE__*/_jsx(Button,{marginY:8,marginRight:12,onClick:function onClick(){return toggleModal;},children:\"add word\"},generateString()),/*#__PURE__*/_jsx(Button,{marginY:8,marginRight:12,children:\"shuffle\"},generateString())]})]});});return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Row,{Left:/*#__PURE__*/_jsxs(\"div\",{children:[dictionaryTabs,/*#__PURE__*/_jsx(Table,{className:\"bg-light table-scroll top-20\",style:{height:\"100%\"},children:listWords()})]}),fixed:\"right\",Right:/*#__PURE__*/_jsx(SearchWord,{})})});};export default OwnDictionary;","map":{"version":3,"sources":["/Users/macbookpro/Documents/GitHub/en-app/src/Pages/Profile/underPages/OwnDictionary/OwnDictionary.tsx"],"names":["Button","React","useState","Table","Row","SearchWord","useOwnDictionary","generateString","DataWords","OwnDictionary","ownDictionary","activeWord","setActiveWord","activePart","setActivePart","activePartOptions","setActivePartOptions","isModal","setIsModal","toggleModal","newActive","word","newActivePartOptions","part","listWords","idx","findIndex","item","words","map","prompt","dictionaryTabs","height"],"mappings":"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","sourcesContent":["import { Button } from \"evergreen-ui\";\nimport React, { useState } from \"react\";\nimport { Table } from \"reactstrap\";\nimport Row from \"../../../../component/Row/Row\";\nimport SearchWord from \"../../../../component/SearchWord/SearchWord\";\nimport { useOwnDictionary } from \"../../../../hooks/useOwnDictionary\";\nimport { generateString } from \"../../../../specialFunction/specialFunction\";\nimport DataWords from \"./DataWords\";\nimport \"./OwnDictionary.scss\";\n\nconst OwnDictionary: React.FC = () => {\n  const ownDictionary: any = useOwnDictionary();\n  const [activeWord, setActiveWord] = useState(\"\");\n  const [activePart, setActivePart] = useState(\"1 part\");\n  const [activePartOptions, setActivePartOptions] = useState(\"\");\n  const [isModal, setIsModal] = useState<boolean>(false);\n\n  const toggleModal = () => setIsModal(!isModal);\n\n  const newActive = (word: string) => activeWord === word? setActiveWord(\"\") : setActiveWord(word);\n  const newActivePartOptions = (part: string) => activePartOptions === part? setActivePartOptions(\"\") : setActivePartOptions(part);\n\n  const listWords = () => {\n    const idx = ownDictionary.findIndex((item: any) => item.part === activePart);\n\n    return ownDictionary[idx]?.words?.map((word: any) => (\n      <DataWords data={word} active={activeWord} newActive={newActive} key={generateString()} activePart={activePart}/>\n    ));\n  };\n\n  if(isModal) {\n    prompt();\n  };\n\n  const dictionaryTabs = ownDictionary.map((part: any) => {\n    return (\n      <div className=\"own-tabs\">\n        <Button \n          marginY={8} \n          marginRight={12}\n          key={generateString()} \n          onClick={() => setActivePart(part.part)}\n          onDoubleClick={() => newActivePartOptions(part.part)}\n        >\n          {part.part}\n        </Button>\n        <div className={`${activePartOptions === part.part? \"show\" : \"hide\"} part-option`}>\n          <Button \n            marginY={8} \n            marginRight={12}\n            key={generateString()} \n            onClick={() => toggleModal}\n          >\n            add word\n          </Button>\n          <Button \n            marginY={8} \n            marginRight={12}\n            key={generateString()} \n          >\n            shuffle\n          </Button>\n        </div>\n      </div>\n    )\n  });\n\n  return (\n    <div>\n      <Row\n        Left={\n        <div>\n          {dictionaryTabs}\n          <Table className=\"bg-light table-scroll top-20\" style={{height: \"100%\"}}>{listWords()}</Table>\n        </div>}\n        fixed=\"right\"\n        Right={<SearchWord />}\n      />\n    </div>\n  )\n};\n\nexport default OwnDictionary;\n"]},"metadata":{},"sourceType":"module"}