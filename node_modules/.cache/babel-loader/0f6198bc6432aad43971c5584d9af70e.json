{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/GitHub/en-app/src/Pages/Tests/Tests.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeTest, shuffle, equalAnswerAndWord } from '../../specialFunction/specialFunction';\nimport { push_audited_test } from '../../store/slices/resultReducer';\nimport { reset_test } from \"../../store/slices/testsReducer\";\nimport Options from '../../component/Options/Options';\nimport { ModalNotice } from '../../component/Modal/Modals';\nimport View from './View';\nimport Timer from '../../component/Timer/Timer';\nimport { optionsForTest } from '../../component/Options/OptionsType';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst makeRandomArr = arr => {\n  let randomArr = [];\n\n  for (let i = 0; i < arr; i++) {\n    randomArr.push(i);\n  }\n\n  return randomArr;\n};\n\nconst Test = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const options = useSelector(state => state.options.options);\n  const gotTest = useSelector(state => state.tests.test);\n  const [test, setTest] = useState([]);\n  const [count, setCount] = useState(0);\n  const [end, setEnd] = useState(false);\n  const [start, setStart] = useState(false);\n  const [isOptions, setIsOptions] = useState(false);\n  const [seeResults, setSeeResults] = useState(false);\n  const [random, setRandom] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);\n  const [startTime, setStartTime] = useState(\"\");\n  const initialValues = {\n    answer: '',\n    answers: []\n  };\n\n  const onSubmit = values => {\n    values.answers.push(values.answer);\n    const auditedTest = equalAnswerAndWord(test, values.answers, options, random, startTime);\n    dispatch(push_audited_test(auditedTest));\n    setSeeResults(true);\n    setCount(0);\n    setStart(false);\n    setEnd(true);\n    values.answers = [];\n    values.answer = \"\";\n  };\n\n  const toggleOptions = () => setIsOptions(!isOptions);\n\n  const sendAnswer = (setFieldValue, values) => {\n    setCount(count + 1);\n    setFieldValue(\"answers\", [...values.answers, values.answer]);\n    setFieldValue(\"answer\", \"\");\n  };\n\n  const startTest = () => {\n    if (!gotTest) {\n      setTest(makeTest(options.words));\n    } else {\n      setTest(gotTest);\n    }\n\n    ;\n    const date = new Date();\n    setStartTime(date);\n    setStart(true);\n    setEnd(false);\n    setIsOptions(false);\n    setSeeResults(false);\n    setRandom(shuffle(makeRandomArr(options.words)));\n    dispatch(reset_test());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [start && /*#__PURE__*/_jsxDEV(Timer, {\n      timer: 60\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(Options, {\n      isOpen: isOptions,\n      setIsOption: () => setIsOptions(false),\n      children: optionsForTest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalNotice, {\n      isModal: seeResults,\n      toggle: () => setSeeResults(!seeResults)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      onSubmit: values => onSubmit(values),\n      children: ({\n        values,\n        setFieldValue\n      }) => {\n        return /*#__PURE__*/_jsxDEV(Form, {\n          className: \"pass-test\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pass-test__inner col-12 col-lg-6\",\n            children: /*#__PURE__*/_jsxDEV(View, {\n              test: test,\n              count: count,\n              end: end,\n              start: start,\n              toggleOptions: toggleOptions,\n              options: options,\n              randomWords: random,\n              values: values,\n              setFieldValue: setFieldValue,\n              startTest: startTest,\n              sendAnswer: sendAnswer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Test, \"1uX77BqdGHb1IaLLHHuQZdGi3Qg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/GitHub/en-app/src/Pages/Tests/Tests.tsx"],"names":["React","useState","Form","Formik","useDispatch","useSelector","makeTest","shuffle","equalAnswerAndWord","push_audited_test","reset_test","Options","ModalNotice","View","Timer","optionsForTest","makeRandomArr","arr","randomArr","i","push","Test","dispatch","options","state","gotTest","tests","test","setTest","count","setCount","end","setEnd","start","setStart","isOptions","setIsOptions","seeResults","setSeeResults","random","setRandom","startTime","setStartTime","initialValues","answer","answers","onSubmit","values","auditedTest","toggleOptions","sendAnswer","setFieldValue","startTest","words","date","Date"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Form, Formik} from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeTest, shuffle, equalAnswerAndWord } from '../../specialFunction/specialFunction';\nimport { push_audited_test } from '../../store/slices/resultReducer';\nimport { reset_test } from \"../../store/slices/testsReducer\";\nimport Options from '../../component/Options/Options';\nimport { ModalNotice } from '../../component/Modal/Modals';\nimport View from './View';\nimport Timer from '../../component/Timer/Timer';\nimport { RootReducer } from '../../store/slices/types';\nimport { InitialValues } from './types';\nimport { optionsForTest } from '../../component/Options/OptionsType';\n\nconst makeRandomArr = (arr: any) => {\n  let randomArr = []; \n\n  for(let i = 0;i < arr; i++) {\n    randomArr.push(i);\n  }\n  return randomArr\n};\n\nconst Test: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const options = useSelector((state: RootReducer) => state.options.options);\n  const gotTest: any = useSelector((state: RootReducer) => state.tests.test);\n  const [test, setTest] = useState([]);\n  const [count, setCount] = useState(0);\n  const [end, setEnd] = useState(false);\n  const [start, setStart] = useState(false);\n  const [isOptions, setIsOptions] = useState(false);\n  const [seeResults, setSeeResults] = useState(false);\n  const [random, setRandom] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);\n  const [startTime, setStartTime] = useState<any>(\"\");\n\n  const initialValues: InitialValues = {\n    answer: '',\n    answers: [],\n  };\n\n  const onSubmit = (values: any) => {\n    values.answers.push(values.answer);\n    const auditedTest = equalAnswerAndWord(test, values.answers, options, random, startTime);\n    dispatch(push_audited_test(auditedTest));\n    setSeeResults(true);\n    setCount(0);\n    setStart(false);\n    setEnd(true);\n    values.answers = [];\n    values.answer = \"\";\n  };\n\n  const toggleOptions = () => setIsOptions(!isOptions);\n\n  const sendAnswer = (setFieldValue: Function, values: any) => {\n    setCount(count + 1);\n    setFieldValue(\"answers\", [...values.answers, values.answer]);\n    setFieldValue(\"answer\", \"\");\n  };\n\n  const startTest = () => {\n    if(!gotTest) {\n      setTest(makeTest(options.words));\n    }else {\n      setTest(gotTest);\n    };\n    const date = new Date();\n    setStartTime(date);\n    setStart(true);\n    setEnd(false);\n    setIsOptions(false);\n    setSeeResults(false);\n    setRandom(shuffle(makeRandomArr(options.words)));\n    dispatch(reset_test());\n  };\n\n  return (\n    <div className=\"page\">\n      { start && <Timer timer={60} /> }\n      <Options isOpen={isOptions} setIsOption={() => setIsOptions(false)}> \n        {optionsForTest}\n      </Options>\n\n      <ModalNotice isModal={seeResults} toggle={() => setSeeResults(!seeResults)}/>\n\n      <Formik \n        initialValues={initialValues} \n        onSubmit={(values) => onSubmit(values)} \n      >\n        {({values, setFieldValue}) => {\n          return (\n            <Form className=\"pass-test\">\n              <div className=\"pass-test__inner col-12 col-lg-6\">\n              <View\n                test={test} \n                count={count} \n                end={end}\n                start={start}\n                toggleOptions={toggleOptions}\n                options={options}\n                randomWords={random}\n                values={values}\n                setFieldValue={setFieldValue}\n                startTest={startTest}\n                sendAnswer={sendAnswer}\n              />\n              </div>\n            </Form>\n          )\n        }}\n      </Formik>\n    </div>\n  )\n};\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}