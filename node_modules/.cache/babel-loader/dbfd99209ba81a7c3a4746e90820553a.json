{"ast":null,"code":"import{allWords}from\"../mockData/words\";var generateString=function generateString(){return Math.random().toString(36).replace(/[^a-z]+/g,'').substr(0,5);};var shuffle=function shuffle(array){return array.sort(function(){return Math.random()-0.5;});};var equalAnswerAndWord=function equalAnswerAndWord(test,answers,options,random,startTime){var type=options.type===\"en-ua\"?\"ua\":\"en\";var words=test.words.map(function(word){return word[type].toLowerCase();});var sortAnswers=random.map(function(_,idx){return answers[random.findIndex(function(e){return e===idx;})];});var audit=words.filter(function(word,idx){return checkAnswer(word,sortAnswers[idx]);});var endDate=new Date();return{name:(test===null||test===void 0?void 0:test.name)?test.name:\"random\",type:options.type,words:test.words,result:audit,answers:sortAnswers,options:options,endDate:endDate,startTime:startTime};};var createTest=function createTest(words){return function(){var amount=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;var randomID=[];var result={name:generateString(),words:[]};for(var i=0;i<amount;i++){randomID.push(Math.floor(Math.random()*124));};randomID.map(function(id){return result.words.push(words[id]);});return result;};};var checkAnswer=function checkAnswer(word,answer){return answer.toLowerCase().includes(word);};var makeTest=createTest(allWords);export{shuffle,generateString,equalAnswerAndWord,makeTest};// const checkAnswer = (word, answer) => {\n//   const splitWord = f(word.split(\"\"));\n//   const splitAnswer = f(answer.split(\"\"));\n//   const coincidence = splitWord.filter((l) => splitAnswer.includes(l));\n//   const necessaryTrue = coincidence.length / 100 * 80;\n//   const result = coincidence.length >= necessaryTrue? true : false;\n//   return {result,splitWord, splitAnswer, coincidence, necessaryTrue, result }\n// };","map":{"version":3,"sources":["/Users/macbookpro/Documents/GitHub/en-app/src/specialFunction/specialFunction.ts"],"names":["allWords","generateString","Math","random","toString","replace","substr","shuffle","array","sort","equalAnswerAndWord","test","answers","options","startTime","type","words","map","word","toLowerCase","sortAnswers","_","idx","findIndex","e","audit","filter","checkAnswer","endDate","Date","name","result","createTest","amount","randomID","i","push","floor","id","answer","includes","makeTest"],"mappings":"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","sourcesContent":["import { allWords } from \"../mockData/words\";\n\nconst generateString = () => Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n\nconst shuffle = (array: any) => {\n  return array.sort(() => Math.random() - 0.5);\n};\n\nconst equalAnswerAndWord = (\n  test: any,\n  answers: string[],\n  options: any,\n  random: number[],\n  startTime: string,\n) => {\n  const type =  options.type === \"en-ua\" ? \"ua\" : \"en\";\n  const words = test.words.map((word: any) => word[type].toLowerCase());\n  const sortAnswers = random.map((_, idx) => answers[random.findIndex((e) => e === idx) as any]);\n\n  const audit = words.filter((word: string, idx: number) => checkAnswer(word, sortAnswers[idx]));\n  const endDate = new Date();\n\n  return {\n    name: test?.name? test.name : \"random\",\n    type: options.type,\n    words: test.words,\n    result: audit,\n    answers: sortAnswers,\n    options,\n    endDate,\n    startTime,\n  };\n};\n\nconst createTest: any = (words: any) => (amount: number = 10) => {\n  let randomID = [];\n  let result: any = {name: generateString(), words: []};\n\n  for(let i = 0; i < amount ; i++) {\n    randomID.push(Math.floor(Math.random() * 124));\n  };\n\n  randomID.map((id: any) => result.words.push(words[id]));\n\n  return result\n};\n\nconst checkAnswer = (word: string, answer: string) => {\n  return answer.toLowerCase().includes(word);\n};\n\nconst makeTest = createTest(allWords);\n\nexport {\n  shuffle,\n  generateString,\n  equalAnswerAndWord,\n  makeTest,\n}\n\n// const checkAnswer = (word, answer) => {\n//   const splitWord = f(word.split(\"\"));\n//   const splitAnswer = f(answer.split(\"\"));\n//   const coincidence = splitWord.filter((l) => splitAnswer.includes(l));\n//   const necessaryTrue = coincidence.length / 100 * 80;\n//   const result = coincidence.length >= necessaryTrue? true : false;\n//   return {result,splitWord, splitAnswer, coincidence, necessaryTrue, result }\n// };\n"]},"metadata":{},"sourceType":"module"}