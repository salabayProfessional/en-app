{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar prefixer_1 = __importDefault(require(\"./prefixer\"));\n\nvar value_to_string_1 = __importDefault(require(\"./value-to-string\"));\n\nvar get_class_name_1 = __importDefault(require(\"./get-class-name\"));\n\nfunction getCss(propertyInfo, value) {\n  var rules;\n  var valueType = typeof value;\n\n  if (valueType !== 'string' && valueType !== 'number') {\n    if (process.env.NODE_ENV !== 'production') {\n      var name = propertyInfo.jsName;\n      var encodedValue = JSON.stringify(value);\n      console.error(\"\\uD83D\\uDCE6 ui-box: property \\u201C\".concat(name, \"\\u201D was passed invalid value \\u201C\").concat(encodedValue, \"\\u201D. Only numbers and strings are supported.\"));\n    }\n\n    return null;\n  }\n\n  var valueString = value_to_string_1.default(value, propertyInfo.defaultUnit);\n  var className = get_class_name_1.default(propertyInfo, valueString);\n\n  if (propertyInfo.isPrefixed) {\n    rules = prefixer_1.default(propertyInfo.jsName || '', valueString);\n  } else {\n    rules = [{\n      property: propertyInfo.cssName || '',\n      value: valueString\n    }];\n  }\n\n  var styles;\n\n  if (process.env.NODE_ENV === 'production') {\n    var rulesString = rules.map(function (rule) {\n      return \"\".concat(rule.property, \":\").concat(rule.value);\n    }).join(';');\n    styles = \".\".concat(className, \"{\").concat(rulesString, \"}\");\n  } else {\n    var _rulesString = rules.map(function (rule) {\n      return \"  \".concat(rule.property, \": \").concat(rule.value, \";\");\n    }).join('\\n');\n\n    styles = \"\\n.\".concat(className, \" {\\n\").concat(_rulesString, \"\\n}\");\n  }\n\n  return {\n    className: className,\n    styles: styles\n  };\n}\n\nexports.default = getCss;","map":{"version":3,"sources":["../../src/get-css.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AAMA,SAAwB,MAAxB,CAA+B,YAA/B,EAA2D,KAA3D,EAAiF;AAC/E,MAAI,KAAJ;AAGA,MAAM,SAAS,GAAG,OAAO,KAAzB;;AACA,MAAI,SAAS,KAAK,QAAd,IAA0B,SAAS,KAAK,QAA5C,EAAsD;AACpD,QAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAM,IAAI,GAAG,YAAY,CAAC,MAA1B;AACA,UAAM,YAAY,GAAG,IAAI,CAAC,SAAL,CAAe,KAAf,CAArB;AACA,MAAA,OAAO,CAAC,KAAR,+CAC0B,IAD1B,mDAC6D,YAD7D;AAGD;;AAED,WAAO,IAAP;AACD;;AAED,MAAM,WAAW,GAAG,iBAAA,CAAA,OAAA,CAAc,KAAd,EAAqB,YAAY,CAAC,WAAlC,CAApB;AACA,MAAM,SAAS,GAAG,gBAAA,CAAA,OAAA,CAAa,YAAb,EAA2B,WAA3B,CAAlB;;AAGA,MAAI,YAAY,CAAC,UAAjB,EAA6B;AAC3B,IAAA,KAAK,GAAG,UAAA,CAAA,OAAA,CAAS,YAAY,CAAC,MAAb,IAAuB,EAAhC,EAAoC,WAApC,CAAR;AACD,GAFD,MAEO;AACL,IAAA,KAAK,GAAG,CAAC;AAAC,MAAA,QAAQ,EAAE,YAAY,CAAC,OAAb,IAAwB,EAAnC;AAAuC,MAAA,KAAK,EAAE;AAA9C,KAAD,CAAR;AACD;;AAED,MAAI,MAAJ;;AACA,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAM,WAAW,GAAG,KAAK,CACtB,GADiB,CACb,UAAA,IAAI;AAAA,uBAAO,IAAI,CAAC,QAAZ,cAAwB,IAAI,CAAC,KAA7B;AAAA,KADS,EAEjB,IAFiB,CAEZ,GAFY,CAApB;AAGA,IAAA,MAAM,cAAO,SAAP,cAAoB,WAApB,MAAN;AACD,GALD,MAKO;AACL,QAAM,YAAW,GAAG,KAAK,CACtB,GADiB,CACb,UAAA,IAAI;AAAA,yBAAS,IAAI,CAAC,QAAd,eAA2B,IAAI,CAAC,KAAhC;AAAA,KADS,EAEjB,IAFiB,CAEZ,IAFY,CAApB;;AAGA,IAAA,MAAM,gBACP,SADO,iBAER,YAFQ,QAAN;AAID;;AAED,SAAO;AAAC,IAAA,SAAS,EAAT,SAAD;AAAY,IAAA,MAAM,EAAN;AAAZ,GAAP;AACD;;AA5CD,OAAA,CAAA,OAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prefixer_1 = __importDefault(require(\"./prefixer\"));\nconst value_to_string_1 = __importDefault(require(\"./value-to-string\"));\nconst get_class_name_1 = __importDefault(require(\"./get-class-name\"));\nfunction getCss(propertyInfo, value) {\n    let rules;\n    const valueType = typeof value;\n    if (valueType !== 'string' && valueType !== 'number') {\n        if (process.env.NODE_ENV !== 'production') {\n            const name = propertyInfo.jsName;\n            const encodedValue = JSON.stringify(value);\n            console.error(`📦 ui-box: property “${name}” was passed invalid value “${encodedValue}”. Only numbers and strings are supported.`);\n        }\n        return null;\n    }\n    const valueString = value_to_string_1.default(value, propertyInfo.defaultUnit);\n    const className = get_class_name_1.default(propertyInfo, valueString);\n    if (propertyInfo.isPrefixed) {\n        rules = prefixer_1.default(propertyInfo.jsName || '', valueString);\n    }\n    else {\n        rules = [{ property: propertyInfo.cssName || '', value: valueString }];\n    }\n    let styles;\n    if (process.env.NODE_ENV === 'production') {\n        const rulesString = rules\n            .map(rule => `${rule.property}:${rule.value}`)\n            .join(';');\n        styles = `.${className}{${rulesString}}`;\n    }\n    else {\n        const rulesString = rules\n            .map(rule => `  ${rule.property}: ${rule.value};`)\n            .join('\\n');\n        styles = `\n.${className} {\n${rulesString}\n}`;\n    }\n    return { className, styles };\n}\nexports.default = getCss;\n//# sourceMappingURL=get-css.js.map"]},"metadata":{},"sourceType":"script"}