{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/GitHub/en-app/src/component/SearchWord/SearchWord.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { Field, Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Spinner } from \"reactstrap\";\nimport { BTN_BG } from \"../../classes\";\nimport { useAppSelector } from \"../../hooks/useRedux\";\nimport { generateString } from \"../../specialFunction/specialFunction\";\nimport { add_word_own_dictionary, add_part_own_dictionary } from \"../../store/slices/authReducer\";\nimport \"./SearchWord.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst arr = [\"firstly\", \"secondly\", \"third\"];\nconst words = [\"\", \"\"];\n\nconst SearchWord = () => {\n  _s();\n\n  const API_BASE = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const ownDictionary = useAppSelector(state => state.auth.dictionary);\n  const initialState = {\n    word: \"\"\n  };\n\n  const onSubmit = async values => {\n    setLoading(true);\n    axios.get(API_BASE + values.word).then(d => {\n      setData(d.data);\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => console.log(\"update\"), [data]);\n\n  const dispatchWord = obj => {\n    const length = ownDictionary.length; //last idx\n\n    if (ownDictionary[length - 1].words.length >= 30) {\n      dispatch(add_part_own_dictionary({\n        part: arr[length],\n        words: [obj]\n      }));\n    } else {\n      dispatch(add_word_own_dictionary(obj));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-word col-12\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      onSubmit: onSubmit,\n      initialValues: initialState,\n      children: () => {\n        return /*#__PURE__*/_jsxDEV(Form, {\n          className: \"search-panel col-12\",\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            className: \"form-control btn-bg\",\n            placeholder: \"word\",\n            name: \"word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info-panel\",\n            children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 30\n            }, this) : data === null || data === void 0 ? void 0 : data.map(d => {\n              var _d$phonetics$, _d$meanings$, _d$meanings$2, _d$meanings$2$definit, _d$meanings$3, _d$meanings$3$definit, _d$meanings$4, _d$meanings$4$definit;\n\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: d.word\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Phonetics:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 70,\n                    columnNumber: 32\n                  }, this), \" \", d === null || d === void 0 ? void 0 : (_d$phonetics$ = d.phonetics[0]) === null || _d$phonetics$ === void 0 ? void 0 : _d$phonetics$.text]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Meanings:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 32\n                  }, this), \" part of speech: \", d === null || d === void 0 ? void 0 : (_d$meanings$ = d.meanings[0]) === null || _d$meanings$ === void 0 ? void 0 : _d$meanings$.partOfSpeech, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 95\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Definitions:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 72,\n                    columnNumber: 32\n                  }, this), \" \", d === null || d === void 0 ? void 0 : (_d$meanings$2 = d.meanings[0]) === null || _d$meanings$2 === void 0 ? void 0 : (_d$meanings$2$definit = _d$meanings$2.definitions[0]) === null || _d$meanings$2$definit === void 0 ? void 0 : _d$meanings$2$definit.definition, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 72,\n                    columnNumber: 96\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Synonyms:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 32\n                  }, this), \" \", d === null || d === void 0 ? void 0 : (_d$meanings$3 = d.meanings[0]) === null || _d$meanings$3 === void 0 ? void 0 : (_d$meanings$3$definit = _d$meanings$3.definitions[0]) === null || _d$meanings$3$definit === void 0 ? void 0 : _d$meanings$3$definit.synonyms.map(synonym => /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [synonym, \", \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 116\n                  }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 142\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Example:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 74,\n                    columnNumber: 32\n                  }, this), \" \", d === null || d === void 0 ? void 0 : (_d$meanings$4 = d.meanings[0]) === null || _d$meanings$4 === void 0 ? void 0 : (_d$meanings$4$definit = _d$meanings$4.definitions[0]) === null || _d$meanings$4$definit === void 0 ? void 0 : _d$meanings$4$definit.example, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 74,\n                    columnNumber: 89\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Origin\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 32\n                  }, this), \" \", d === null || d === void 0 ? void 0 : d.origin, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 57\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: BTN_BG,\n                  type: \"button\",\n                  onClick: () => dispatchWord({\n                    word: data\n                  }),\n                  children: \"ADD IN DICTIONARY\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 29\n                }, this)]\n              }, generateString(), true, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 27\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchWord, \"EoVU6SRvfYa8zHV0KvgKlNiDKsQ=\", false, function () {\n  return [useDispatch, useAppSelector];\n});\n\n_c = SearchWord;\nexport default SearchWord;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchWord\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/GitHub/en-app/src/component/SearchWord/SearchWord.tsx"],"names":["axios","Field","Form","Formik","React","useEffect","useState","useDispatch","Spinner","BTN_BG","useAppSelector","generateString","add_word_own_dictionary","add_part_own_dictionary","arr","words","SearchWord","API_BASE","dispatch","data","setData","loading","setLoading","ownDictionary","state","auth","dictionary","initialState","word","onSubmit","values","get","then","d","console","log","dispatchWord","obj","length","part","map","phonetics","text","meanings","partOfSpeech","definitions","definition","synonyms","synonym","example","origin"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { Field, Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { Spinner } from \"reactstrap\";\nimport { BTN_BG } from \"../../classes\";\nimport { useAppSelector } from \"../../hooks/useRedux\";\nimport { generateString } from \"../../specialFunction/specialFunction\";\nimport { add_word_own_dictionary, add_part_own_dictionary } from \"../../store/slices/authReducer\";\nimport { WordData } from \"../../store/slices/types\";\nimport \"./SearchWord.scss\";\nconst arr = [\"firstly\", \"secondly\", \"third\"];\nconst words = [\"\",\"\"]\n\nconst SearchWord: React.FC = () => {\n  const API_BASE = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\n  const dispatch = useDispatch();\n\n  const [data, setData] = useState<WordData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const ownDictionary = useAppSelector(state => state.auth.dictionary);\n\n  interface InitialState {\n    word: string\n  }\n\n  const initialState : InitialState= {\n    word: \"\",\n  }\n\n  const onSubmit = async (values: InitialState) => {\n    setLoading(true);\n    axios.get(API_BASE + values.word)\n    .then((d: any) => {\n      setData(d.data);\n      setLoading(false);\n    })\n  };\n\n  useEffect(() => console.log(\"update\"), [data]);\n\n  const dispatchWord = (obj: any) => {\n    const length = ownDictionary.length; //last idx\n    if(ownDictionary[length - 1].words.length >= 30) {\n      dispatch(add_part_own_dictionary({part: arr[length], words: [obj]}));\n    }else {\n      dispatch(add_word_own_dictionary(obj));\n    }\n    \n  }\n\n  return (\n    <div className=\"search-word col-12\">\n      <Formik  \n        onSubmit={onSubmit}\n        initialValues={initialState}\n      >\n        {\n          () => {\n            return (\n              <Form className=\"search-panel col-12\">\n                <Field className=\"form-control btn-bg\" placeholder=\"word\" name=\"word\" />\n                <div className=\"info-panel\">\n                  {\n                    loading? <Spinner /> : (\n                      data?.map((d: WordData) => {\n                        return (\n                          <div key={generateString()}>\n                            <h4>{d.word}</h4>\n                            <p><b>Phonetics:</b> {d?.phonetics[0]?.text}</p>\n                            <p><b>Meanings:</b> part of speech: {d?.meanings[0]?.partOfSpeech}<br /></p>\n                            <p><b>Definitions:</b> {d?.meanings[0]?.definitions[0]?.definition}<br /></p>\n                            <p><b>Synonyms:</b> {d?.meanings[0]?.definitions[0]?.synonyms.map((synonym: string) => <span>{synonym}, </span>)}<br /></p>\n                            <p><b>Example:</b> {d?.meanings[0]?.definitions[0]?.example}<br /></p>\n                            <p><b>Origin</b> {d?.origin}<br /></p>\n                            <button \n                              className={BTN_BG} type=\"button\" \n                              onClick={() => dispatchWord({word: data})}>ADD IN DICTIONARY</button>\n                          </div>\n                        )\n                      })\n                    )\n                  }\n                </div>\n              </Form>\n            )\n          }\n        }\n      </Formik>\n    </div>\n  )\n};\n\nexport default SearchWord;\n"]},"metadata":{},"sourceType":"module"}