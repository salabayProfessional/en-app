{"ast":null,"code":"import _slicedToArray from\"/Users/macbookpro/Documents/GitHub/en-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useSelector}from'react-redux';import{Button}from'reactstrap';import{ModalInfo}from'../../../../component/Modal/Modals';import{generateString}from'../../../../specialFunction/specialFunction';import\"./All-test.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var AllTest=function AllTest(){var allTests=useSelector(function(state){return state.tests.allTests;});var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isModal=_useState2[0],toggleIsModal=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),infoID=_useState4[0],setInfoId=_useState4[1];var toggleIsInfoModal=function toggleIsInfoModal(){return toggleIsModal(!isModal);};var list=allTests.map(function(test){return/*#__PURE__*/_jsxs(\"div\",{className:\"test__item\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"title\",children:test.name}),/*#__PURE__*/_jsx(Button,{className:\"btn btn-success btn-center btn-bg border-none\",type:\"button\",onClick:function onClick(){setInfoId(test.name);toggleIsInfoModal();},children:\"Show\"})]},generateString());});return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(ModalInfo,{toggle:toggleIsInfoModal,test:allTests.find(function(test){return test.name===infoID;}),isModal:isModal}),/*#__PURE__*/_jsx(\"div\",{className:\"All-test\",children:/*#__PURE__*/_jsx(\"div\",{className:\"All-test__inner\",children:list})})]});};export default AllTest;","map":{"version":3,"sources":["/Users/macbookpro/Documents/GitHub/en-app/src/Pages/Profile/underPages/All-test/All-test.tsx"],"names":["React","useState","useSelector","Button","ModalInfo","generateString","AllTest","allTests","state","tests","isModal","toggleIsModal","infoID","setInfoId","toggleIsInfoModal","list","map","test","name","find"],"mappings":"gKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,MAAT,KAAuB,YAAvB,CACA,OAASC,SAAT,KAA0B,oCAA1B,CACA,OAASC,cAAT,KAA+B,6CAA/B,CAEA,MAAO,iBAAP,C,6IAYA,GAAMC,CAAAA,OAAiB,CAAG,QAApBA,CAAAA,OAAoB,EAAM,CAC9B,GAAMC,CAAAA,QAAQ,CAAGL,WAAW,CAAC,SAACM,KAAD,QAAwBA,CAAAA,KAAK,CAACC,KAAN,CAAYF,QAApC,EAAD,CAA5B,CACA,cAAiCN,QAAQ,CAAC,KAAD,CAAzC,wCAAOS,OAAP,eAAgBC,aAAhB,eACA,eAA4BV,QAAQ,CAAC,EAAD,CAApC,yCAAOW,MAAP,eAAeC,SAAf,eACA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,SAAMH,CAAAA,aAAa,CAAC,CAACD,OAAF,CAAnB,EAA1B,CAEA,GAAMK,CAAAA,IAAI,CAAGR,QAAQ,CAACS,GAAT,CAAa,SAACC,IAAD,CAAgB,CACxC,mBACE,aAAK,SAAS,CAAC,YAAf,wBACE,WAAI,SAAS,CAAC,OAAd,UAAuBA,IAAI,CAACC,IAA5B,EADF,cAEE,KAAC,MAAD,EAAQ,SAAS,CAAC,+CAAlB,CAAkE,IAAI,CAAC,QAAvE,CAAgF,OAAO,CAAE,kBAAM,CAC7FL,SAAS,CAACI,IAAI,CAACC,IAAN,CAAT,CACAJ,iBAAiB,GAClB,CAHD,kBAFF,GAAiCT,cAAc,EAA/C,CADF,CASD,CAVY,CAAb,CAYA,mBACE,wCACE,KAAC,SAAD,EACE,MAAM,CAAES,iBADV,CAEE,IAAI,CAAEP,QAAQ,CAACY,IAAT,CAAc,SAACF,IAAD,QAAgBA,CAAAA,IAAI,CAACC,IAAL,GAAcN,MAA9B,EAAd,CAFR,CAGE,OAAO,CAAEF,OAHX,EADF,cAME,YAAK,SAAS,CAAC,UAAf,uBACE,YAAK,SAAS,CAAC,iBAAf,UACIK,IADJ,EADF,EANF,GADF,CAcD,CAhCD,CAkCA,cAAeT,CAAAA,OAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Button } from 'reactstrap';\nimport { ModalInfo } from '../../../../component/Modal/Modals';\nimport { generateString } from '../../../../specialFunction/specialFunction';\nimport { RootReducer } from '../../../../store/slices/types';\nimport \"./All-test.scss\";\n\ninterface Test {\n  name: string\n  options: {\n    timer: number,\n    amount: number,\n  }\n  type: string\n  words: {en: string, ua: string}[]\n}\n\nconst AllTest: React.FC = () => {\n  const allTests = useSelector((state: RootReducer) => state.tests.allTests);\n  const [isModal, toggleIsModal] = useState(false);\n  const [infoID, setInfoId] = useState(\"\");\n  const toggleIsInfoModal = () => toggleIsModal(!isModal);\n\n  const list = allTests.map((test: Test) => {\n    return (\n      <div className=\"test__item\" key={generateString()}>\n        <h3 className=\"title\">{test.name}</h3>\n        <Button className=\"btn btn-success btn-center btn-bg border-none\" type=\"button\" onClick={() => {\n          setInfoId(test.name);\n          toggleIsInfoModal();\n        }}>Show</Button>\n      </div>\n    )\n  })\n\n  return (\n    <>\n      <ModalInfo \n        toggle={toggleIsInfoModal} \n        test={allTests.find((test: Test) => test.name === infoID)} \n        isModal={isModal} \n      />\n      <div className=\"All-test\">\n        <div className=\"All-test__inner\">\n          { list }\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AllTest;"]},"metadata":{},"sourceType":"module"}